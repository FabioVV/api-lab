from reservas.permissions import IsPowerUser
from reservas.serializers import ReservaSerializer, Reserva, BoletoSerializer
from rest_framework import viewsets, permissions
from rest_framework.response import Response
from django.shortcuts import get_object_or_404
from rest_framework import status
from rest_framework.pagination import PageNumberPagination
from rest_framework.permissions import IsAuthenticated, AllowAny
import requests as r
from django.db.models import Q
from rest_framework.views import APIView
import random

# Create your views here.

## PAGINAÇÃO
class ReservaV3paginacaoCustomizada(PageNumberPagination):
    page_size = 10
## PAGINAÇÃO


class ReservaViewSet(viewsets.ModelViewSet):
    queryset = Reserva.objects.all()
    serializer_class = ReservaSerializer
    pagination_class = ReservaV3paginacaoCustomizada
    permission_classes = [IsAuthenticated]


    def get_permissions(self):

        if self.request.method in ['PATCH', 'DELETE'] and not self.request.user.is_anonymous:
            return [IsPowerUser(),]
        
        return super().get_permissions()
    
    def get_object(self):
        pk = self.kwargs.get('pk', '')
        obj = get_object_or_404(self.get_queryset(), pk=pk)

        self.check_object_permissions(self.request, obj)
        return obj
    
    def partial_update(self, request, *args, **kwargs):
        reserva = self.get_object()

        serializer = ReservaSerializer(instance=reserva,
                                            data=request.data, 
                                            many=False,
                                            partial=True,)
        serializer.is_valid(raise_exception=True)

        serializer.save()
        return Response(serializer.data)
    


    def create(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)

        headers = self.get_success_headers(serializer.validated_data)

        serializer.save(user = self.request.user)

        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)



        # serializer.is_valid(raise_exception=True)
        # serializer.save(user = request.user)
        # return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)


    
    # def create(self, request, *args, **kwargs):
    #     serializer = self.get_serializer(data=request.data)
    #     serializer.is_valid(raise_exception=True)
    #     serializer.save(user = request.user)
    #     headers = self.get_success_headers(serializer.data)
    #     return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)


class PagarReserva(APIView):
    permission_classes = [permissions.IsAuthenticated,]

    def post(self, request):
        data = request.data

        serializer = BoletoSerializer(data=data)

        if serializer.is_valid(raise_exception=True):

            boleto_number = serializer.validated_data.get('boleto')
            url = "https://api-go-wash-efc9c9582687.herokuapp.com/api/pay-boleto"
            data = {'boleto': boleto_number, 'user_id': self.request.user.id, }

            request = r.post(url, data=data, headers={ 'Authorization': 'Vf9WSyYqnwxXODjiExToZCT9ByWb3FVsjr' })

            if request.status_code == 200:
                request = request.json()
                request['info'] = serializer.data

                return Response(request, status=status.HTTP_201_CREATED)
            else:
                return Response(status=status.HTTP_400_BAD_REQUEST, data={'error':'The payment failed. Please, try again later.'})
    

























from rest_framework import serializers
from reservas.models import Reserva
from reservas.validators import ReservaValidator


class ReservaSerializer(serializers.ModelSerializer):

    class Meta:
        model = Reserva
        fields = [
            'id',
            'laboratory',
            'user',
            'booked_at',
        ]

        extra_kwargs = {'laboratory': {'required': True}} 

    def validate(self, attrs):

        # if self.instance is not None and attrs.get('coisa_aqui') is None:
        #     attrs['coisa_aqui'] = self.instance.coisa_aqui
        
        ReservaValidator(data=attrs, ErrorClass=serializers.ValidationError)

        return super().validate(attrs)
    
class BoletoSerializer(serializers.Serializer):
    boleto = serializers.CharField()
    user_id = serializers.CharField()















































from collections import defaultdict
from django.forms import ValidationError
from laboratorios.models import Laboratorio
from reservas.models import Reserva


class ReservaValidator:
    def __init__(self, data, errors=None, ErrorClass=None):
        self.errors = defaultdict(list) if errors is None else errors
        self.ErrorClass = ValidationError if ErrorClass is None else ErrorClass
        self.data = data
        self.clean()


    def clean(self, *args, **kwargs):
        
        self.clean_duplicate_booking()
        # self.check_boleto_number()
        
        # laboratorio = self.data.get('laboratorio')
        # usuario = self.data.get('usuario')
        if self.errors:
            raise self.ErrorClass(self.errors)


    

    def clean_duplicate_booking(self):

        laboratory = self.data.get('laboratory')
        laboratory_duplicate = Reserva.objects.filter(laboratory__in=Laboratorio.objects.filter(id=laboratory.id).all()).all().count()
        
        if laboratory_duplicate > 0:
            self.errors['laboratory'].append('Laboratory in use.')


    # def check_boleto_number(self):

    #     boleto = self.data.get('bol_number')

    #     if boleto is None or boleto is "":
    #         self.errors['bol_number'].append('Could not confirm the boleto number')

























from reservas.views import ReservaViewSet
from django.urls import path, include
from rest_framework.routers import SimpleRouter
from reservas.views import PagarReserva


router = SimpleRouter()
router.register(r'', ReservaViewSet,basename="reservas-api")


urlpatterns = [
    path('api/v3/reservas/', include(router.urls)),
    path('api/v3/pay_booking/', PagarReserva.as_view(), name='pay-booking'),
]